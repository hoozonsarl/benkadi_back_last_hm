"""first migration

Revision ID: e9ca746a63ac
Revises: 
Create Date: 2025-08-25 10:27:28.696715

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'e9ca746a63ac'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('fractionTypes',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('nom', sa.String(), nullable=False),
    sa.Column('nombreDeJourExpiration', sa.Integer(), nullable=True),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.Column('is_default_selected', sa.Boolean(), nullable=True),
    sa.Column('code', sa.String(), nullable=True),
    sa.Column('quarantaine', sa.Integer(), nullable=True),
    sa.Column('is_total', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code')
    )
    op.create_index(op.f('ix_fractionTypes_nom'), 'fractionTypes', ['nom'], unique=True)
    op.create_table('groupeUtilisateurs',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('nom', sa.String(), nullable=False),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('nom')
    )
    op.create_table('logs',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('action', sa.String(), nullable=True),
    sa.Column('nom_utilisateur', sa.String(), nullable=True),
    sa.Column('date_action', sa.DateTime(), nullable=True),
    sa.Column('ressource', sa.String(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('id_utilisateur', sa.Integer(), nullable=True),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('permissions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('action', sa.Enum('create', 'read', 'update', 'delete', name='actionenum'), nullable=False),
    sa.Column('subject', sa.String(length=50), nullable=False),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('action', 'subject', name='permission_unique')
    )
    op.create_table('GroupeUtisateurHasPermissions',
    sa.Column('group_utilisateur_id', sa.Integer(), nullable=False),
    sa.Column('permission_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['group_utilisateur_id'], ['groupeUtilisateurs.id'], ),
    sa.ForeignKeyConstraint(['permission_id'], ['permissions.id'], ),
    sa.PrimaryKeyConstraint('group_utilisateur_id', 'permission_id')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(length=50), nullable=False),
    sa.Column('gender', sa.Enum('MALE', 'FEMALE', 'NONBINARY', 'UNKNOWN', name='gender'), nullable=True),
    sa.Column('password', sa.String(), nullable=False),
    sa.Column('dateNaissance', sa.Date(), nullable=True),
    sa.Column('intituleDuPoste', sa.String(length=100), nullable=True),
    sa.Column('telephone', sa.String(length=100), nullable=True),
    sa.Column('nom', sa.String(length=50), nullable=True),
    sa.Column('prenom', sa.String(length=50), nullable=True),
    sa.Column('nationality', sa.String(length=50), nullable=True),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.Column('id_groupe_utilisateur', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id_groupe_utilisateur'], ['groupeUtilisateurs.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_table('donneursUsers',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('nom', sa.String(length=50), nullable=True),
    sa.Column('prenom', sa.String(length=50), nullable=True),
    sa.Column('userName', sa.String(length=80), nullable=False),
    sa.Column('dateDeNaissance', sa.Date(), nullable=True),
    sa.Column('lieuDeNaissance', sa.String(length=50), nullable=True),
    sa.Column('numeroCNI', sa.String(length=80), nullable=True),
    sa.Column('passport', sa.String(length=80), nullable=True),
    sa.Column('carte_scolaire', sa.String(length=80), nullable=True),
    sa.Column('carte_elec', sa.String(length=80), nullable=True),
    sa.Column('carte_etudiant', sa.String(length=80), nullable=True),
    sa.Column('dateDelivranceIdCard', sa.Date(), nullable=True),
    sa.Column('villeResidence', sa.String(length=80), nullable=True),
    sa.Column('niveauEtude', sa.String(length=80), nullable=True),
    sa.Column('permisConduire', sa.String(length=80), nullable=True),
    sa.Column('sexe', sa.Enum('HOMME', 'FEMME', name='sexe'), nullable=True),
    sa.Column('profession', sa.String(length=50), nullable=True),
    sa.Column('statusMatrimonial', sa.Enum('CELIBATAIRE', 'MARIE', 'DIVORCE', 'VEUVE', name='statusmatrimonial'), nullable=True),
    sa.Column('paysOrigine', sa.String(length=100), nullable=True),
    sa.Column('religion', sa.Enum('MUSULMAN', 'CHRETIEN', 'JEHOVAH', 'ANEMIST', 'TRADITIONNALIST', 'AUTRE', 'NON_SPECIFIE', name='religion'), nullable=True),
    sa.Column('adresse', sa.String(length=100), nullable=True),
    sa.Column('telephone', sa.String(length=20), nullable=True),
    sa.Column('email', sa.String(length=30), nullable=True),
    sa.Column('groupeSanguin', sa.String(), nullable=True),
    sa.Column('dateDeProchainDon', sa.Date(), nullable=True),
    sa.Column('dateDernierDon', sa.Date(), nullable=True),
    sa.Column('datePossibleDon', sa.Date(), nullable=True),
    sa.Column('nombreDeDons', sa.Integer(), nullable=True),
    sa.Column('accidentDon', sa.String(), nullable=True),
    sa.Column('dejaTransfuse', sa.String(), nullable=True),
    sa.Column('isDelayed', sa.Boolean(), nullable=True),
    sa.Column('isDelayedDate', sa.Date(), nullable=True),
    sa.Column('is_don_done', sa.Boolean(), nullable=True),
    sa.Column('last_don_date', sa.Date(), nullable=True),
    sa.Column('final_comment', sa.String(), nullable=True),
    sa.Column('nombreDeDonsGenyco', sa.Integer(), nullable=True),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.Column('id_user', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['id_user'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_donneursUsers_carte_elec'), 'donneursUsers', ['carte_elec'], unique=False)
    op.create_index(op.f('ix_donneursUsers_carte_etudiant'), 'donneursUsers', ['carte_etudiant'], unique=False)
    op.create_index(op.f('ix_donneursUsers_carte_scolaire'), 'donneursUsers', ['carte_scolaire'], unique=False)
    op.create_index(op.f('ix_donneursUsers_id'), 'donneursUsers', ['id'], unique=False)
    op.create_index(op.f('ix_donneursUsers_numeroCNI'), 'donneursUsers', ['numeroCNI'], unique=False)
    op.create_index(op.f('ix_donneursUsers_passport'), 'donneursUsers', ['passport'], unique=False)
    op.create_index(op.f('ix_donneursUsers_permisConduire'), 'donneursUsers', ['permisConduire'], unique=False)
    op.create_table('hospitals',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('nom', sa.String(), nullable=True),
    sa.Column('ville', sa.String(), nullable=True),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.Column('id_user', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['id_user'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('nom', 'ville', name='hospital_unique')
    )
    op.create_table('reactifs',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('nom', sa.String(length=50), nullable=True),
    sa.Column('reference', sa.String(length=50), nullable=True),
    sa.Column('quantite', sa.Integer(), nullable=True),
    sa.Column('valeur_seuil', sa.Float(), nullable=True),
    sa.Column('numero_code_bar', sa.String(), nullable=True),
    sa.Column('codeBar', sa.String(), nullable=False),
    sa.Column('numero_lot', sa.String(), nullable=True),
    sa.Column('date_expiration', sa.Date(), nullable=True),
    sa.Column('date_production', sa.Date(), nullable=True),
    sa.Column('id_user', sa.Integer(), nullable=True),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['id_user'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('codeBar'),
    sa.UniqueConstraint('numero_code_bar')
    )
    op.create_table('receveurs',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('nom', sa.String(length=50), nullable=False),
    sa.Column('prenom', sa.String(length=50), nullable=True),
    sa.Column('userName', sa.String(length=80), nullable=False),
    sa.Column('dateDeNaissance', sa.Date(), nullable=True),
    sa.Column('telephone', sa.String(length=100), nullable=True),
    sa.Column('email', sa.String(length=100), nullable=True),
    sa.Column('sexe', sa.Enum('HOMME', 'FEMME', name='sexe'), nullable=True),
    sa.Column('groupe_sanguin', sa.String(), nullable=True),
    sa.Column('groupe_sanguin_receveur', sa.String(), nullable=True),
    sa.Column('phenotype', sa.String(), nullable=True),
    sa.Column('id_user', sa.Integer(), nullable=True),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.Column('hospital', sa.String(), nullable=True),
    sa.Column('service', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['id_user'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_receveurs_id'), 'receveurs', ['id'], unique=False)
    op.create_table('bon_de_sangs',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('nom', sa.String(length=50), nullable=False),
    sa.Column('prenom', sa.String(length=50), nullable=True),
    sa.Column('userName', sa.String(length=80), nullable=False),
    sa.Column('dateDeNaissance', sa.Date(), nullable=True),
    sa.Column('telephone', sa.String(length=100), nullable=True),
    sa.Column('sexe', sa.Enum('HOMME', 'FEMME', name='sexe'), nullable=True),
    sa.Column('email', sa.String(length=100), nullable=True),
    sa.Column('patient_interne', sa.Boolean(), nullable=True),
    sa.Column('poids', sa.Integer(), nullable=True),
    sa.Column('chambre', sa.String(), nullable=True),
    sa.Column('lit', sa.String(), nullable=True),
    sa.Column('heure_demande', sa.Time(), nullable=True),
    sa.Column('antecedent_medicaux', sa.String(), nullable=True),
    sa.Column('indication', sa.String(), nullable=True),
    sa.Column('statusVIH', sa.Boolean(), nullable=True),
    sa.Column('statusVHB', sa.Boolean(), nullable=True),
    sa.Column('statusVHC', sa.Boolean(), nullable=True),
    sa.Column('groupe_sanguin', sa.String(), nullable=True),
    sa.Column('groupe_sanguin_receveur', sa.String(), nullable=True),
    sa.Column('groupe_sanguin_nouveau_ne', sa.String(), nullable=True),
    sa.Column('phenotype', sa.String(), nullable=True),
    sa.Column('nature_du_produit_sanguin', sa.String(), nullable=True),
    sa.Column('nombre_de_poches', sa.Integer(), nullable=True),
    sa.Column('antecedent_transfusionnel', sa.Integer(), nullable=True),
    sa.Column('RAI_positif', sa.Boolean(), nullable=True),
    sa.Column('taux_hemoglobine', sa.Float(), nullable=True),
    sa.Column('programme', sa.Date(), nullable=True),
    sa.Column('heure', sa.Time(), nullable=True),
    sa.Column('hospital', sa.String(), nullable=True),
    sa.Column('service', sa.String(), nullable=True),
    sa.Column('medecin_demandeur', sa.String(), nullable=True),
    sa.Column('specialité', sa.String(), nullable=True),
    sa.Column('estDistribue', sa.Boolean(), nullable=True),
    sa.Column('id_user', sa.Integer(), nullable=True),
    sa.Column('examens', sa.String(), nullable=True),
    sa.Column('estAnalyse', sa.Boolean(), nullable=True),
    sa.Column('is_phenotype_done', sa.Boolean(), nullable=True),
    sa.Column('is_test_compatibilite_done', sa.Boolean(), nullable=True),
    sa.Column('date_transfusion', sa.Date(), nullable=True),
    sa.Column('date_reception', sa.Date(), nullable=True),
    sa.Column('date_retour_poche', sa.Date(), nullable=True),
    sa.Column('motif', sa.String(), nullable=True),
    sa.Column('test_compatibilite', sa.String(), nullable=True),
    sa.Column('id_receveur', sa.Integer(), nullable=True),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['id_receveur'], ['receveurs.id'], ),
    sa.ForeignKeyConstraint(['id_user'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('donneurs',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('nom', sa.String(length=50), nullable=True),
    sa.Column('prenom', sa.String(length=50), nullable=True),
    sa.Column('dateDeNaissance', sa.Date(), nullable=True),
    sa.Column('lieuDeNaissance', sa.String(length=50), nullable=True),
    sa.Column('userName', sa.String(length=80), nullable=False),
    sa.Column('numeroCNI', sa.String(length=80), nullable=True),
    sa.Column('passport', sa.String(length=80), nullable=True),
    sa.Column('carte_scolaire', sa.String(length=80), nullable=True),
    sa.Column('carte_elec', sa.String(length=80), nullable=True),
    sa.Column('carte_etudiant', sa.String(length=80), nullable=True),
    sa.Column('dateDelivranceIdCard', sa.Date(), nullable=True),
    sa.Column('villeResidence', sa.String(length=80), nullable=True),
    sa.Column('niveauEtude', sa.String(length=80), nullable=True),
    sa.Column('permisConduire', sa.String(length=80), nullable=True),
    sa.Column('sexe', sa.Enum('HOMME', 'FEMME', name='sexe'), nullable=True),
    sa.Column('profession', sa.String(length=50), nullable=True),
    sa.Column('statusMatrimonial', sa.Enum('CELIBATAIRE', 'MARIE', 'DIVORCE', 'VEUVE', name='statusmatrimonial'), nullable=True),
    sa.Column('paysOrigine', sa.String(length=100), nullable=True),
    sa.Column('religion', sa.Enum('MUSULMAN', 'CHRETIEN', 'JEHOVAH', 'ANEMIST', 'TRADITIONNALIST', 'AUTRE', 'NON_SPECIFIE', name='religion'), nullable=True),
    sa.Column('adresse', sa.String(length=100), nullable=True),
    sa.Column('telephone', sa.String(length=20), nullable=True),
    sa.Column('email', sa.String(length=30), nullable=True),
    sa.Column('groupeSanguin', sa.String(), nullable=True),
    sa.Column('dateDeProchainDon', sa.Date(), nullable=True),
    sa.Column('dateDernierDon', sa.Date(), nullable=True),
    sa.Column('datePossibleDon', sa.Date(), nullable=True),
    sa.Column('isDelayed', sa.Boolean(), nullable=True),
    sa.Column('isDelayedDate', sa.Date(), nullable=True),
    sa.Column('nombreDeDons', sa.Integer(), nullable=True),
    sa.Column('accidentDon', sa.String(), nullable=True),
    sa.Column('dejaTransfuse', sa.String(), nullable=True),
    sa.Column('isDonneur', sa.Boolean(), nullable=True),
    sa.Column('isValideMedecin', sa.Boolean(), nullable=True),
    sa.Column('isValideAnalyseTDR', sa.Boolean(), nullable=True),
    sa.Column('lu_approve', sa.Boolean(), nullable=True),
    sa.Column('dateAccueil', sa.Date(), nullable=True),
    sa.Column('heureAccueil', sa.Time(), nullable=True),
    sa.Column('dateConsultation', sa.Date(), nullable=True),
    sa.Column('heureConsultation', sa.Time(), nullable=True),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.Column('id_user', sa.Integer(), nullable=True),
    sa.Column('quartier', sa.String(), nullable=True),
    sa.Column('is_tdr_done', sa.Boolean(), nullable=True),
    sa.Column('is_ok_prelevement', sa.Boolean(), nullable=True),
    sa.Column('is_rejected', sa.Boolean(), nullable=True),
    sa.Column('is_prelevement_done', sa.Boolean(), nullable=True),
    sa.Column('is_don_done', sa.Boolean(), nullable=True),
    sa.Column('last_don_date', sa.Date(), nullable=True),
    sa.Column('final_comment', sa.String(), nullable=True),
    sa.Column('id_donneurUser', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['id_donneurUser'], ['donneursUsers.id'], ),
    sa.ForeignKeyConstraint(['id_user'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_donneurs_carte_elec'), 'donneurs', ['carte_elec'], unique=False)
    op.create_index(op.f('ix_donneurs_carte_etudiant'), 'donneurs', ['carte_etudiant'], unique=False)
    op.create_index(op.f('ix_donneurs_carte_scolaire'), 'donneurs', ['carte_scolaire'], unique=False)
    op.create_index(op.f('ix_donneurs_id'), 'donneurs', ['id'], unique=False)
    op.create_index(op.f('ix_donneurs_numeroCNI'), 'donneurs', ['numeroCNI'], unique=False)
    op.create_index(op.f('ix_donneurs_passport'), 'donneurs', ['passport'], unique=False)
    op.create_index(op.f('ix_donneurs_permisConduire'), 'donneurs', ['permisConduire'], unique=False)
    op.create_table('parametres',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('tensionArterielleBs', sa.String(), nullable=True),
    sa.Column('tensionArterielleMd', sa.String(), nullable=True),
    sa.Column('tensionArterielleF', sa.String(), nullable=True),
    sa.Column('rythmeCardiaque', sa.Integer(), nullable=True),
    sa.Column('poids', sa.Integer(), nullable=True),
    sa.Column('hemoglobine', sa.Float(), nullable=True),
    sa.Column('taille', sa.Float(), nullable=True),
    sa.Column('commentaire', sa.String(), nullable=True),
    sa.Column('quantite', sa.Integer(), nullable=True),
    sa.Column('remarques', sa.String(), nullable=True),
    sa.Column('depistageVIH', sa.Boolean(), nullable=True),
    sa.Column('id_donneur', sa.Integer(), nullable=True),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.Column('raisonDon', sa.String(), nullable=True),
    sa.Column('raisonDon_aide', sa.String(), nullable=True),
    sa.Column('raisonDon_remplacer', sa.String(), nullable=True),
    sa.Column('raisonDon_famille', sa.String(), nullable=True),
    sa.Column('jeune', sa.String(), nullable=True),
    sa.Column('affections', sa.String(), nullable=True),
    sa.Column('infectionSexulle', sa.String(), nullable=True),
    sa.Column('hospitalisation', sa.String(), nullable=True),
    sa.Column('bonneSante', sa.String(), nullable=True),
    sa.Column('malade', sa.String(), nullable=True),
    sa.Column('fievre', sa.String(), nullable=True),
    sa.Column('medicaments', sa.String(), nullable=True),
    sa.Column('vaccine', sa.String(), nullable=True),
    sa.Column('antecedents', sa.String(), nullable=True),
    sa.Column('accident', sa.String(), nullable=True),
    sa.Column('dentiste', sa.String(), nullable=True),
    sa.Column('endoscopie', sa.String(), nullable=True),
    sa.Column('acupuncture', sa.String(), nullable=True),
    sa.Column('tatouage', sa.String(), nullable=True),
    sa.Column('exposition', sa.String(), nullable=True),
    sa.Column('testVIH', sa.String(), nullable=True),
    sa.Column('entourageMalade', sa.String(), nullable=True),
    sa.Column('rapportSexuel', sa.String(), nullable=True),
    sa.Column('preservatif', sa.String(), nullable=True),
    sa.Column('drogue', sa.String(), nullable=True),
    sa.Column('voyageEtranger', sa.String(), nullable=True),
    sa.Column('rapportSexuelHomme', sa.String(), nullable=True),
    sa.Column('grossesse', sa.String(), nullable=True),
    sa.Column('allaitez', sa.String(), nullable=True),
    sa.Column('fausseCouche', sa.String(), nullable=True),
    sa.Column('regles', sa.String(), nullable=True),
    sa.Column('benevole', sa.Boolean(), nullable=True),
    sa.Column('nomPatient', sa.String(), nullable=True),
    sa.Column('prenomPatient', sa.String(), nullable=True),
    sa.Column('hopital', sa.String(), nullable=True),
    sa.Column('serviceSanitaire', sa.String(), nullable=True),
    sa.Column('examen_tdr', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['id_donneur'], ['donneurs.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_parametres_id'), 'parametres', ['id'], unique=False)
    op.create_table('params_receveurs',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('temps', sa.String(), nullable=True),
    sa.Column('temperature', sa.Float(), nullable=True),
    sa.Column('pression_arterielle', sa.String(), nullable=True),
    sa.Column('rythme_respiratoire', sa.Integer(), nullable=True),
    sa.Column('saturation_en_oxygene', sa.Integer(), nullable=True),
    sa.Column('pouls', sa.Integer(), nullable=True),
    sa.Column('ta', sa.String(), nullable=True),
    sa.Column('etat_du_malade', sa.String(), nullable=True),
    sa.Column('frissons', sa.String(), nullable=True),
    sa.Column('sueurs', sa.String(), nullable=True),
    sa.Column('id_user', sa.Integer(), nullable=True),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.Column('id_bon_de_sang', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['id_bon_de_sang'], ['bon_de_sangs.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['id_user'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_params_receveurs_id'), 'params_receveurs', ['id'], unique=False)
    op.create_table('smss',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('contenue', sa.String(), nullable=True),
    sa.Column('id_user', sa.Integer(), nullable=True),
    sa.Column('id_donneur', sa.Integer(), nullable=True),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['id_donneur'], ['donneurs.id'], ),
    sa.ForeignKeyConstraint(['id_user'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('prelevements',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('numero_code_bar', sa.String(), nullable=True),
    sa.Column('codeBar', sa.String(), nullable=False),
    sa.Column('dateDePrelevement', sa.Date(), nullable=True),
    sa.Column('heureDebut', sa.Time(), nullable=True),
    sa.Column('heureFin', sa.Time(), nullable=True),
    sa.Column('poidsDePoche', sa.Integer(), nullable=True),
    sa.Column('volumePrevele', sa.Integer(), nullable=True),
    sa.Column('remarques', sa.String(), nullable=True),
    sa.Column('effetsIndesirables', sa.String(), nullable=True),
    sa.Column('estAnalyser', sa.Boolean(), nullable=True),
    sa.Column('id_donneur', sa.Integer(), nullable=True),
    sa.Column('id_parametre', sa.Integer(), nullable=True),
    sa.Column('id_user', sa.Integer(), nullable=True),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.Column('code_diff', sa.String(), nullable=True),
    sa.Column('is_phenotype_done', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['id_donneur'], ['donneurs.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['id_parametre'], ['parametres.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['id_user'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('codeBar'),
    sa.UniqueConstraint('numero_code_bar')
    )
    op.create_table('pocheDeSangs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('groupeSanguin', sa.Enum('Aplus', 'Amoins', 'ABplus', 'ABmoins', 'Oplus', 'Omoins', 'Bplus', 'Bmoins', name='groupesanguin'), nullable=True),
    sa.Column('phenotype', sa.String(), nullable=True),
    sa.Column('dateAnalyse', sa.DateTime(), nullable=True),
    sa.Column('estvalide', sa.Boolean(), nullable=True),
    sa.Column('estFractionne', sa.Boolean(), nullable=True),
    sa.Column('estDetruire', sa.Boolean(), nullable=True),
    sa.Column('id_prelevement', sa.Integer(), nullable=True),
    sa.Column('id_donneur', sa.Integer(), nullable=True),
    sa.Column('id_user', sa.Integer(), nullable=True),
    sa.Column('motifDestruction', sa.String(), nullable=True),
    sa.Column('observation', sa.String(), nullable=True),
    sa.Column('isAnalyseDone', sa.Boolean(), nullable=True),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.Column('examens', sa.String(), nullable=True),
    sa.Column('is_phenotype_done', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['id_donneur'], ['donneurs.id'], ),
    sa.ForeignKeyConstraint(['id_prelevement'], ['prelevements.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['id_user'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('fractions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('id_poche_de_sang', sa.Integer(), nullable=True),
    sa.Column('dateDePrelevement', sa.Date(), nullable=True),
    sa.Column('dateDeExpiration', sa.Date(), nullable=True),
    sa.Column('volume', sa.Integer(), nullable=True),
    sa.Column('poids', sa.Integer(), nullable=True),
    sa.Column('estDistribue', sa.Boolean(), nullable=True),
    sa.Column('is_valid', sa.Boolean(), nullable=True),
    sa.Column('is_analyse_done', sa.Boolean(), nullable=True),
    sa.Column('estArchive', sa.Boolean(), nullable=True),
    sa.Column('id_fraction_type', sa.Integer(), nullable=True),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.Column('numero_code_bar', sa.String(), nullable=True),
    sa.Column('code_bar', sa.String(), nullable=True),
    sa.Column('dateAvailable', sa.Date(), nullable=True),
    sa.Column('is_ok_to_use', sa.Boolean(), nullable=True),
    sa.Column('is_destroy', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['id_fraction_type'], ['fractionTypes.id'], ),
    sa.ForeignKeyConstraint(['id_poche_de_sang'], ['pocheDeSangs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('distributions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('dateDeDistribution', sa.DateTime(), nullable=True),
    sa.Column('telephoneTransporteur', sa.String(), nullable=True),
    sa.Column('nomTransporteur', sa.String(), nullable=True),
    sa.Column('cniTransporteur', sa.String(), nullable=True),
    sa.Column('nom_hospital_destinataire', sa.String(), nullable=True),
    sa.Column('service', sa.String(), nullable=True),
    sa.Column('is_interne', sa.Boolean(), nullable=True),
    sa.Column('id_fraction', sa.Integer(), nullable=True),
    sa.Column('id_user', sa.Integer(), nullable=True),
    sa.Column('id_bon_de_sang', sa.Integer(), nullable=True),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['id_bon_de_sang'], ['bon_de_sangs.id'], ),
    sa.ForeignKeyConstraint(['id_fraction'], ['fractions.id'], ),
    sa.ForeignKeyConstraint(['id_user'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('distributions')
    op.drop_table('fractions')
    op.drop_table('pocheDeSangs')
    op.drop_table('prelevements')
    op.drop_table('smss')
    op.drop_index(op.f('ix_params_receveurs_id'), table_name='params_receveurs')
    op.drop_table('params_receveurs')
    op.drop_index(op.f('ix_parametres_id'), table_name='parametres')
    op.drop_table('parametres')
    op.drop_index(op.f('ix_donneurs_permisConduire'), table_name='donneurs')
    op.drop_index(op.f('ix_donneurs_passport'), table_name='donneurs')
    op.drop_index(op.f('ix_donneurs_numeroCNI'), table_name='donneurs')
    op.drop_index(op.f('ix_donneurs_id'), table_name='donneurs')
    op.drop_index(op.f('ix_donneurs_carte_scolaire'), table_name='donneurs')
    op.drop_index(op.f('ix_donneurs_carte_etudiant'), table_name='donneurs')
    op.drop_index(op.f('ix_donneurs_carte_elec'), table_name='donneurs')
    op.drop_table('donneurs')
    op.drop_table('bon_de_sangs')
    op.drop_index(op.f('ix_receveurs_id'), table_name='receveurs')
    op.drop_table('receveurs')
    op.drop_table('reactifs')
    op.drop_table('hospitals')
    op.drop_index(op.f('ix_donneursUsers_permisConduire'), table_name='donneursUsers')
    op.drop_index(op.f('ix_donneursUsers_passport'), table_name='donneursUsers')
    op.drop_index(op.f('ix_donneursUsers_numeroCNI'), table_name='donneursUsers')
    op.drop_index(op.f('ix_donneursUsers_id'), table_name='donneursUsers')
    op.drop_index(op.f('ix_donneursUsers_carte_scolaire'), table_name='donneursUsers')
    op.drop_index(op.f('ix_donneursUsers_carte_etudiant'), table_name='donneursUsers')
    op.drop_index(op.f('ix_donneursUsers_carte_elec'), table_name='donneursUsers')
    op.drop_table('donneursUsers')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_table('GroupeUtisateurHasPermissions')
    op.drop_table('permissions')
    op.drop_table('logs')
    op.drop_table('groupeUtilisateurs')
    op.drop_index(op.f('ix_fractionTypes_nom'), table_name='fractionTypes')
    op.drop_table('fractionTypes')
    # ### end Alembic commands ###
